8) //call by reference
#include <stdio.h>
void swap(int *a, int *b);
int main()
{
    int a, b;
   printf("enter the two numbers");
   scanf("%d %d",&a,&b);
   swap(a,b);
   printf("after swapping %d %d",a,b);
    return 0;
}
void swap(int *a,int *b){
    int temp;
    temp=*a;
    *a=*b;
    *b=temp;
}

//call b
#include <stdio.h>
 void swap(int a, int b);
int main()
{
    int a, b;
  printf("enter the two numbers");
   scanf("%d %d",&a,&b);
   swap(a,b);
   printf("after swapping %d %d",a,b);
     return 0;
}
 void swap(int a,int b){
    int temp;
    temp=a;
    a=b;
     b=temp;
 }


2) Biggest number in an array of size 10
#include <stdio.h>

int main()
{
    int arr[10],i;
    int big=arr[0];
    printf("enter the array elements");
    for(i=0;i<10;i++){
        scanf("%d",&arr[i]);
    }
    for(i=0;i<10;i++){
        if(arr[i]>big){
            big=arr[i];
        }
    }
    printf(" biggest number is %d",big);

    return 0;
}


9) //using dynamic memory allocation
#include <stdio.h>
#include<stdlib.h>
int main()
{
    int *p;
    p=(int *)malloc(sizeof(int)*10);
    int big=p[0],i;
    printf("enter the array elements");
    for(i=0;i<10;i++){
        scanf("%d",&p[i]);
       
    }
   
     for(i=0;i<10;i++){
       if((p[i])>big){
            big=(p[i]);
        }
 }
   printf(" biggest number is %d\t",big);

    return 0;
}


4)
search a number in an array using dynamic memory allocation
#include <stdio.h>
#include<stdlib.h>
int main()
{
    int *p;
    p=(int *)malloc(sizeof(int)*10);
    int key,flag=0,i;
    printf("enter the array elements");
    for(i=0;i<10;i++){
        scanf("%d",&p[i]);
       
    }
   printf("enter the key value");
   scanf("%d",&key);
     for(i=0;i<10;i++){
       if((p[i])==key){
        flag=1;
        }
 }
 if(flag==1){
     printf("key found");
 }
     else
     printf("key not found");
 
 return 0;
}



6)//Structure
#include<stdio.h>
#include<stdlib.h>
struct student{
    char usn[10];
    char name[20];
    char branch[10];
};
 typedef struct student std;
struct emp{
    char id[10];
    char name[10];
    char address[10];
};
 typedef struct emp emp1;

struct faculty{
    char name[10];
    int age;
};
typedef struct faculty fac;
int main(){
    
    std *s1;
    emp1 *e1;
     fac *f1;
    
    s1=(std*)malloc(sizeof(std));
    e1=(emp1*)malloc(sizeof(emp1));
    f1=(fac*)malloc(sizeof(fac));
    printf("student details");
    scanf("%s %s %s",&s1->usn,&s1->name,&s1->branch);
    printf("%s\t %s\t %s\t",s1->usn,s1->name,s1->branch);
    
    printf("employee details");
    scanf("%s %s %s",&e1->id,&e1->name,&e1->address);
    printf("%s\t %s\t %s\t",e1->id,e1->name,e1->address);
    
    printf("faculty details");
    scanf("%s %d",&f1->name,&f1->age);
    printf("%s\t %d",f1->name,f1->age);
    return 0;
    
}
